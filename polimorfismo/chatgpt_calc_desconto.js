// Classe base
class Animal {
    constructor(name) {
        this.name = name;
    }

    makeSound() {
        console.log("O animal faz um som.");
        }
}

  // Subclasse que estende a classe Animal
class Dog extends Animal {
    makeSound() {
        console.log("O cachorro late.");
    }
}

  // Subclasse que estende a classe Animal
class Cat extends Animal {
    makeSound() {
        console.log("O gato mia.");
    }
}

  // Fun√ß√£o que recebe um objeto Animal e chama o m√©todo makeSound
function makeAnimalSound(animal) {
    animal.makeSound();
}

//animal eh o parametro da funcao...onde vai ser substituido por uma variavel que contem o novo objeto

  // Criando inst√¢ncias das classes Dog e Cat
const dog = new Dog("Rex");
const cat = new Cat("Whiskers");

  // Chamando a fun√ß√£o makeAnimalSound com diferentes objetos
  makeAnimalSound(dog); // Sa√≠da: "O cachorro late."
  makeAnimalSound(cat); // Sa√≠da: "O gato mia."

  //√â poss√≠vel aplicar polimorfismo na programa√ßao funcional?


//   ü§ñ ChatGPT: - Na programa√ß√£o funcional, o conceito de polimorfismo √© um pouco diferente do exemplo anterior,
//    pois n√£o h√° classes ou heran√ßa como na programa√ß√£o orientada a objetos.

//No entanto, √© poss√≠vel obter um comportamento polim√≥rfico usando fun√ß√µes de alta ordem (higher-order functions) 
//e passando fun√ß√µes como par√¢metros.

// // Fun√ß√£o polim√≥rfica que recebe uma fun√ß√£o como argumento
// function makeAnimalSound(animalFn) {
//     return animalFn();
// }

//   // Fun√ß√µes espec√≠ficas para diferentes sons de animais
// function dogSound() {
//     console.log("O cachorro late.");
// }

// function catSound() {
//     console.log("O gato mia.");
// }

//   // Utilizando a fun√ß√£o polim√≥rfica com diferentes fun√ß√µes
//   makeAnimalSound(dogSound); // Sa√≠da: "O cachorro late."
//   makeAnimalSound(catSound); // Sa√≠da: "O gato mia."

//PRODUCT DESCONTO POLIMORFISMO COM CLASSE

// Classe base
class Product {
    constructor(name, price) {
        this.name = name;
        this.price = price;
    }   

    calculateDiscount() {
      return 0; // sem desconto por padr√£o
    }
}

  // Subclasse que estende a classe Product
class SaleProduct extends Product {
    constructor(name, price, discountPercentage) {
        super(name, price);
        this.discountPercentage = discountPercentage;
    }

    calculateDiscount() {
      return (this.price * this.discountPercentage) / 100;
    }
}

  // Subclasse que estende a classe Product
class ClearanceProduct extends Product {
    constructor(name, price, clearancePrice) {
        super(name, price);
        this.clearancePrice = clearancePrice;
    }

    calculateDiscount() {
        return this.price - this.clearancePrice;
    }
}

  // Fun√ß√£o que recebe um objeto Product e calcula o desconto
function calculateProductDiscount(product) {
    const discount = product.calculateDiscount();
    console.log(`O desconto do produto ${product.name} √© de ${discount} reais.`);
}

  // Criando inst√¢ncias das classes SaleProduct e ClearanceProduct
  const saleProduct = new SaleProduct("Camiseta", 50, 20); // 20% de desconto
  const clearanceProduct = new ClearanceProduct("Cal√ßa", 100, 70); // pre√ßo de liquida√ß√£o de 70 reais

  // Chamando a fun√ß√£o calculateProductDiscount com diferentes objetos
  calculateProductDiscount(saleProduct); // Sa√≠da: "O desconto do produto Camiseta √© de 10 reais."
  calculateProductDiscount(clearanceProduct); // Sa√≠da: "O desconto do produto Cal√ßa √© de 30 reais."





///////////////////////////////////////////////////////////////////
  //POLIMORFISMO COM FUNCAO

  ///////////////////////////////////////////////
  // Fun√ß√£o base
function calculateDiscount(product) {
    return 0; // sem desconto por padr√£o
}

  // Fun√ß√£o para calcular o desconto de um produto em promo√ß√£o
function calculateSaleDiscount(product) {
    return (product.price * product.discountPercentage) / 100;
}

  // Fun√ß√£o para calcular o desconto de um produto em liquida√ß√£o
function calculateClearanceDiscount(product) {
    return product.price - product.clearancePrice;
}

  // Objeto representando um produto em promo√ß√£o
const saleProduct = {
    name: "Camiseta",
    price: 50,
    discountPercentage: 20, // 20% de desconto
};

  // Objeto representando um produto em liquida√ß√£o
const clearanceProduct = {
    name: "Cal√ßa",
    price: 100,
    clearancePrice: 70, // pre√ßo de liquida√ß√£o de 70 reais
};

  // Fun√ß√£o que recebe um objeto produto e uma fun√ß√£o de desconto e calcula o desconto
function calculateProductDiscount(product, discountFunction) {
    const discount = discountFunction(product);
    console.log(`O desconto do produto ${product.name} √© de ${discount} reais.`);
}

  // Chamando a fun√ß√£o calculateProductDiscount com diferentes objetos e fun√ß√µes de desconto
  calculateProductDiscount(saleProduct, calculateSaleDiscount); // Sa√≠da: "O desconto do produto Camiseta √© de 10 reais."
  calculateProductDiscount(clearanceProduct, calculateClearanceDiscount); // Sa√≠da: "O desconto do produto Cal√ßa √© de 30 reais."